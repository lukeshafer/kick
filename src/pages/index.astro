---
import Fighter from '../fighter';
import { room, platforms } from '../rooms/test-room.json';

type NumToString<T> = {
	[key in keyof T]: T[key] extends number ? string : T[key];
};

function numberToPx<T extends Record<string, any>>(orig: T) {
	const keys: (keyof T)[] = Object.keys(orig);
	const entries = keys.map(
		(key): [key: keyof T, value: string | T[keyof T]] => {
			const value =
				typeof orig[key] === 'number' ? `${orig[key]}px` : orig[key];
			return [key, value];
		}
	);
	const obj = Object.fromEntries(entries);
	return obj;
}

const styledRoom = numberToPx(room) as NumToString<typeof room>;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link
			rel="icon"
			type="image/svg+xml"
			href="https://twemoji.maxcdn.com/2/svg/1f9b6.svg"
		/>
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Kick!</title>
	</head>
	<body>
		<main class="h-screen bg-black flex justify-center items-center">
			<div
				class="flex items-end relative"
				style={{
					...styledRoom,
				}}>
				{
					platforms.map((platform) => (
						<div
							class="absolute"
							style={{
								left: `${platform.left}px`,
								bottom: `${platform.bottom}px`,
								height: `${platform.height}px`,
								width: `${platform.width}px`,
								background: platform.background || 'black',
							}}
						/>
					))
				}
				<Fighter
					client:load
					name="Tony Onion"
					room={{ room, bounds: room, platforms }}
					frameList={(await import('../characters.json'))['TonyOnion']}
					keybinds={{ J: 'LEFT', L: 'RIGHT', I: 'JUMP', K: 'KICK' }}
				/>
				<Fighter
					client:load
					name="Kicko"
					room={{ room, bounds: room, platforms }}
					frameList={(await import('../characters.json'))['Kicko']}
					keybinds={{ S: 'LEFT', F: 'RIGHT', E: 'JUMP', D: 'KICK' }}
				/>
			</div>
		</main>
	</body>
</html>

<style></style>
